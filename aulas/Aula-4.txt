Fluxo da Aplicação

- Inicialmente a aplicação lê o arquivo de rotas: routes/home.js
- Ao ler o arquivo de rotas, ele vai interpretar e já se preparar para ler e realizar as ações baseadas nas actions dos controllers
- Ao colocar a rota '/' (vazia), ele entende a declaração abaixo:
    var homec = app.controllers.homec;
    app.get('/', homec.index);

E vai buscar aonde temos controllers (definidos no arquivo app.js que setamos a pasta 'controllers' para onde temos os arquivos) -> o homec é o nome do arquivo JS (ele interpreta sem precisar da extensão)
- Ao entrar no controller homec.js, vemos o export do módulo com a declaração do HomeController como abaixo:
    module.exports = function (app) {
        var HomeController = { };

        return HomeController;
    }

Dentro da variável do HomeController declaramos nossas actions que serão as ações a serem tomadas pela aplicação quando rotas forem acionadas
- A rota '/' está definida para ler a action 'homec.index' que está abaixo:
    index: function (request, response) {
        response.render('home/inicio');
    }

A action de index por reagir a uma rota acionada, tem por definição a request e a response, aonde é possível compreender entradas e saídas para a tela
- Como response é definido o comando de render que por sua vez chamará uma view para ser literalmente renderizada na tela - como previamente declarado no arquivo app.js, a pasta de views fica na base da aplicação e o caminho declarado dentro de render estará dentro dessa pasta. Então temos 'views' como pasta primárias; 'home' como pasta interna e 'inicio' como o arquivo de visualização (auto entendido sem necessidade da extensão como a interpretação do homec)

- A tela de inicio tem um formulario com o método POST e com a action de '/login', o arquivo de rotas já tem pré-definido para entender o que deve fazer se receber essa rota:
    app.post('/login', homec.login);

- Ao carregar a requisição do tipo POST '/login', será acionado a action do HomeController que irá realizar:
    - Obtenção de dados do corpo da requisição por meio do 'request.body.usuario.[attr]' (nome e senha são propriedades do objeto usuario - usuario é o name do input)
    - É validado os dados inseridos
    - É armazenado em uma sessão os dados do usuario por meio de 'request.session.usuarioSession = user' (usuarioSession é o nome que demos a sessão, pode ser qualquer um - user é a variável que criamos com o conteudo do corpo da requisição com os dados enviados do usuário pelo formulario)
    - Redirecionamento (chamada de rota por meio da aplicação) para a rota '/eventos'
    - Se os dados não baterem, ele redireciona pra tela inicial, e voltamos ao inicio da explicação do FLUXO

- Ao ser acionada a rota de eventos, será executada a validação da rota abaixo que acionará a ação de listar no controller de eventos:
    app.get('/eventos', eventosc.listar);

- A action de listar irá renderizar a view listar dentro da pasta eventos que está dentro da pasta principal de views pela linha abaixo:
    response.render('eventos/listar')



ATIVIDADE PARA AULA 5

Criar uma tela para cadastro de eventos
- rota
- action
- view (formulario com input para título/nome do evento [text], data [date] e preço [number] + botão de cadastrar)

Criar visual para tela de Lista Eventos
- criar tabela listando eventos -> pode usar bootstrap CSS

DESCRIÇÃO                  DATA                     PREÇO
Meu aniversario            xx/xx/xxxx               R$ 10,00
Churrasco da firma         xx/xx/xxxx               R$ 30,00
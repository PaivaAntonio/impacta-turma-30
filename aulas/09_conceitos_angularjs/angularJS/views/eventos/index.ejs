<!DOCTYPE html>
<html lang="en" ng-app="appAngular">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eventos</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
</head>
<!-- CTL é abreviação para ConTroLler-->

<body ng-controller="CTLprincipal as ctl">
    <section class="container">
        <h1>Cadastro e consulta de eventos</h1>

        <div class="row">
            <div class="col-md-6">
                <h2>Lista de Eventos</h2>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Descrição</th>
                            <th>Data</th>
                            <th>Preço</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- evento é o item individual da lista retornada pelo webservice que será executado e lido para montar cada linha de retorno -->
                        <tr ng-repeat="evento in ctl.listaEventos">
                            <td>{{ evento.descricao | uppercase }}</td>
                            <td>{{ evento.data | date:'dd/MM/yyyy' }}</td>
                            <td>{{ evento.preco | currency:'R$' }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-md-6">
                <h2>Inclusão de Eventos</h2>
                <form name="incluirEvento" ng-submit="ctl.criarEvento()">
                    <div class="form-group">
                        <label for="descricao">Descrição</label>
                        <input type="text" name="descricao" id="descricao" ng-model="ctl.novoEvento.descricao" class="form-control">
                        <!-- o ng-model faz o binding da informação permitindo o uso da informação no HTML e no javascript -->
                    </div>
                    <div class="form-group">
                        <label for="data">Data</label>
                        <input type="date" name="data" id="data" ng-model="ctl.novoEvento.data" class="form-control">
                    </div>
                    <div class="form-group">
                        <label for="preco">Preço</label>
                        <input type="number" name="preco" id="preco" ng-model="ctl.novoEvento.preco" class="form-control">
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Adicionar Evento</button>
                    </div>
                </form>
            </div>
        </div>
    </section>
</body>

<script>
    // angular (de angular.module) é uma palavra reservada do Angular para descrevermos o módulo
    // o primeiro parâmetro usado é o 'appAngular' (que é o que declaramos no ng-app na tag HTML) pois é o nome da aplicação que colocamos na declaração do código HTML
    // o segundo parâmetro é usado para declaração de dependencias da aplicação. Nossa aplicação não tem nenhuma, portanto deixaremos uma lista vazia
    var app = angular.module("appAngular", []);

    // a partir da declaração do módulo angular, vamos utilizar a var 'app' como nossa aplicação e então executaremos a função de controller
    // na linha 15 declaramos o nome do controller como 'CTLprincipal' e o seu apelido como 'ctl'
    app.controller("CTLprincipal", ['$http', function($http) {
        // o primeiro parâmetro é o nome do controller
        // o segundo parâmetro são as dependências que utilizaremos no controller
        // utilizaremos a dependência do HTTP similar a que usamos no NODE
        // por padrão no AngularJS todo os módulos tem o $ na frente
        // se declararmos mais de uma dependência, é necessário utilizar na 'function' a mesma ordem pois é a forma que o angularJS interpreta suas dependências
        // app.controller("CTLprincipal", ['$http', '$url', '$location', function($http, $url, $location)]){ <- caso a declaração na function mude, os nomes seguem o padrão colocado nas dependencias antes de function - o nome dentro de 'function' é apenas um ALIAS, o que de fato importa é a ordem das dependencias antes de function - NÃO É OBRIGATÓRIO TER O MESMO NOME DA DEPENDENCIA, APENAS É UMA BOA PRÁTICA

        // agora criaremos uma variável baseada no this (referencia própria)
        // armazenaremos nela a lista de eventos que será importada para nós
        var self = this;
        // é necessário salvar o 'this' em uma variável pois a instância de um this é referente aonde ele existe, logo se criarmos uma function abaixo desse this, o this dentro da function não será o mesmo externo, então se armazenamos o this em uma variavel, conseguimos salvar a referencia e usar em outro local/function

        // crio uma lista vazia de eventos para poder ser populada e posteriormente lida no HTML para exibir na tela
        self.listaEventos = [];
        self.novoEvento = {};

        // criaremos a função para acessar o webservice
        var listarEventos = function() {
            //utilizamos o HTTP para criar uma requisição de GET que acessa a nossa WEBSERVICE e então processa 2 possibilidades: sucesso e erro 
            // aqui utilizamos uma promise implícita, similar ao fetch que usamos anteriormente
            // a diferença é que não usamos 2 then, usamos apenas 1 que se sucesso, vem todas as informações da promise e o 'data' com os dados de retorno
            return $http.get('http://localhost:3200/eventos')
                .then(function(resposta) {
                    // quando o get finalizar, usaremos o then que processa as informações que foram retornadas e então o primeiro valor do then é o SUCESSO, o segundo é o ERRO

                    // exibição de teste do retorno no console do navegador
                    console.log(resposta.data);

                    // aqui no sucesso pegamos a resposta do webservice e usamos o 'data' que são os dados retornados, e atribuimo o valor no self.listaEventos, que é a lista criada fora da função
                    self.listaEventos = resposta.data;
                }, function(erro) {
                    console.log(erro)
                    alert('Aconteceu um erro');
                })
        }

        // chamamos a função para executar após processar o código existente, que carregará ops eventos para então colocarmos no código HTML
        listarEventos();


        self.criarEvento = function() {
            $http({
                url: 'http://localhost:3200/evento',
                method: 'POST',
                data: self.novoEvento,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(function(resposta) {
                console.log(resposta);
                self.novoEvento = {};
            }, function(erro) {
                console.log(erro);
                alert('Ocorreu um erro ao inserir o evento')
            }).then(listarEventos);
        }
    }])
</script>

</html>